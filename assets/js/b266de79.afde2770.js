"use strict";(self.webpackChunkm_365_tech=self.webpackChunkm_365_tech||[]).push([[518],{4369:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"changes-pnp-management-shell-registration","metadata":{"permalink":"/changes-pnp-management-shell-registration","source":"@site/blog/2024-09-08-changes-pnp-management-shell-registration/index.md","title":"Changes in PnP Management Shell registration in Microsoft 365","description":"What is happening on Sept 9th, 2024","date":"2024-09-08T00:00:00.000Z","tags":[{"inline":true,"label":"M365","permalink":"/tags/m-365"},{"inline":true,"label":"PnP PowerShell","permalink":"/tags/pn-p-power-shell"},{"inline":true,"label":"SharePoint","permalink":"/tags/share-point"}],"readingTime":2.65,"hasTruncateMarker":false,"authors":[{"name":"Mark Doria","title":"M365 Engineer","url":"https://github.com/m365-tech","imageURL":"https://github.com/m365-tech.png","key":"markd"}],"frontMatter":{"slug":"changes-pnp-management-shell-registration","title":"Changes in PnP Management Shell registration in Microsoft 365","authors":["markd"],"tags":["M365","PnP PowerShell","SharePoint"]},"unlisted":false,"nextItem":{"title":"Bulk change the owner of Power Automate flows using PowerShell","permalink":"/bulk-change-the-owner-of-power-automate-flows-using-powershell"}},"content":"## What is happening on Sept 9th, 2024\\n\\nAs announced by the [PnP Powershell Team](https://pnp.github.io/blog/post/changes-pnp-management-shell-registration), the multi-tenant app registration will be deleted on September 9th, 2024. For those who are not familiar what this application looks like in your tenant, here is a screenshot:\\n\\n![Multi Tenant App Registration](./multi-tenant-app.jpg)\\n\\nAs quoted:\\n>This change is provided to help customers to improve their security posture by encouraging the use of single tenant app registrations with on just the scopes and permissions which are needed.\\n>\\n> -- PnP PowerShell Team\\n\\n## Multi-Tenant App Registration\\n\\nThe Multi-Tenant App Registration was created by the PnP PowerShell Team in order to provide a quick way for M365 tenants to utilize the PnP.PowerShell modules and connect to desired tenants. It can be downloaded and installed by M365 customers to provide scripting capabilities for their admins/users. This application provides [DELEGATED access](https://learn.microsoft.com/en-us/entra/identity-platform/delegated-access-primer) to the sites the user has access to. \\n\\n:::tip\\nMulti-Tenant App Registration has a set of [default permissions](./index.md#multi-tenant-app-permissions) which cannot be altered once installed. This is probably, in my opinion, the reason they are eliminating this app.\\n:::\\n\\nOnce connected to the tenant, you will be able to utilize the [PnP cmdlets](https://pnp.github.io/powershell/cmdlets/index.html) depending on your current access to the site.\\n\\n### -Interactive\\nThis is the old way of connecting to sites. If you only provide the -Interactive parameter, you are explicitly saying the command to use the multi-tenant app registration to connect.\\n:::warning\\nThis line of code will be unusable after the changes on Sept 9th\\n:::\\n```powershell\\nConnect-PnPOnline [tenant].sharepoint.com -Interactive\\n```\\n\\n## Using your own App Registration\\n\\nTo replace the Multi-Tenant App Registration provided by the PnP PowerShell team, customers must now create a new Application Registration to be able to utilize the PnP PowerShell Module. Admins will now be able to scope what particular permissions should be allowed when using the module.\\n\\n### Creating an App Registration\\n\\n1. Navigate to your **[Entra Admin Portal](https://aad.cmd.ms)**\\n2. Click on **Applications** > **App Registrations**\\n\\n![App Reg](./app-reg.jpg)\\n\\n3. Click on **New Registration**\\n\\n![New App Reg](./new-app-reg.jpg)\\n\\n4. Fill out the **Name**. On the Redirect URI, Select **Public client/native (mobile & desktop)**, and then type in **\\"http://localhost\\"**. Hit **Register** at the bottom of the page.\\n\\n![Register App](./register-app.jpg)\\n\\n5. Once created, copy the application id and save it for future reference.\\n\\n![App Created](./copy-app-id.jpg)\\n\\n### Adding Permissions\\n\\n1. Navigate to **API Permissions**\\n\\n![API Permissions](./api-permissions.jpg)\\n\\n2. Click on **Add Permission**\\n\\n![Add Permission](./add-permission.jpg)\\n\\n3. Find and click **SharePoint** (We will add SharePoint just for demo). We can also replicate the [Multi-Tenant App Permissions](./index.md#multi-tenant-app-permissions) afterwards.\\n\\n![Add SharePoint](./add-sharepoint.jpg)\\n\\n4. Select **Delegated Permissions**\\n\\n![Delegated Permission](./select-delegated.jpg)\\n\\n5. Find and Check on **AllSites.FullControl**. Hit **Add Permissions**.\\n\\n![Select All Sites](./select-allsites.jpg)\\n\\n6. Click on **Grant admin consent for [environment name]**. Hit **Yes** to the prompt.\\n\\n![Grant Consent](./grant-consent.jpg)\\n![Yes Grant Consent](./yes-grant-consent.jpg)\\n\\n### Use the newly created App Registration\\n\\nOnce the application is created, users can now use the line below to connect to tenants. **-ClientId** specifies that user is connecting using the newly registered application.\\n\\n```powershell\\nConnect-PnPOnline [tenant].sharepoint.com -Interactive -ClientId [ApplicationID]\\n```\\n\\n![Successful Connection](./connect-success.jpg)\\n\\n\\n## Multi-Tenant App Permissions\\n\\nFor reference, here is the list of old permissions granted to the app.\\n![Old Permissions 1](./old-permissions-1.jpg)\\n![Old Permissions 2](./old-permissions-2.jpg)\\n![Old Permissions 3](./old-permissions-3.jpg)\\n![Old Permissions 4](./old-permissions-4.jpg)"},{"id":"bulk-change-the-owner-of-power-automate-flows-using-powershell","metadata":{"permalink":"/bulk-change-the-owner-of-power-automate-flows-using-powershell","source":"@site/blog/2024-07-01-Change-the-owner-of-Power-Automate-flows-using-PowerShell/index.md","title":"Bulk change the owner of Power Automate flows using PowerShell","description":"One of the operational task that many M365 admins is to maintain a current inventory of all Power Automate flows living inside their tenants. The real problem though is everytime a tenant user creates a new flow, tenant admins doesn\'t have the direct access to view/modify those flows. And if that particular user leaves the company there would be an unmonitored flow that may break without anyone being notified.","date":"2024-07-01T00:00:00.000Z","tags":[{"inline":false,"label":"Power Automate","permalink":"/tags/powerautomate","description":"blog post related to Power Automate"},{"inline":false,"label":"PowerShell","permalink":"/tags/powershell","description":"blog post related to PowerShell"}],"readingTime":2.575,"hasTruncateMarker":true,"authors":[{"name":"Mark Doria","title":"M365 Engineer","url":"https://github.com/m365-tech","imageURL":"https://github.com/m365-tech.png","key":"markd"}],"frontMatter":{"slug":"bulk-change-the-owner-of-power-automate-flows-using-powershell","title":"Bulk change the owner of Power Automate flows using PowerShell","authors":["markd"],"tags":["PowerAutomate","PowerShell"]},"unlisted":false,"prevItem":{"title":"Changes in PnP Management Shell registration in Microsoft 365","permalink":"/changes-pnp-management-shell-registration"}},"content":"One of the operational task that many M365 admins is to maintain a current inventory of all Power Automate flows living inside their tenants. The real problem though is everytime a tenant user creates a new flow, tenant admins doesn\'t have the direct access to view/modify those flows. And if that particular user leaves the company there would be an unmonitored flow that may break without anyone being notified.\\n\\nIn this post, we will discuss how to add/change the Power Automate Owners using powershell.\\n\x3c!--truncate--\x3e\\n## Pre-requisites\\n:::info\\n\\nAt a minimum, **Power Platform Admin** role is needed to execute the steps below.\\n\\n:::\\n\\n## Manual through UI\\n\\nAs an admin, you can go to [Power Platform Admin](https://pp.cmd.ms) > Environments > Select Environment > Under Resources > Select Flows and you will be presented with all the flows in your environment. You can individually share or enable these flows using this screen.\\n\\n\\n![Power Platform Admin Flow List](./ppadm-flow-list.jpg)\\n\\n## Automate using PowerShell\\n### Install Modules\\n\\nYou first need to install the required modules.\\n\\n```powershell\\nInstall-Module -Name AzureAD -Scope CurrentUser\\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell -Scope CurrentUser\\nInstall-Module -Name Microsoft.PowerApps.PowerShell -Scope CurrentUser\\n```\\n\\n### Script Composition\\n\\n#### Define UPN\\n```powershell\\n#Define User Principal Name of the new owner\\n$upn = username@tenant.com\\n```\\n\\n#### Get ObjectID in Azure AD\\nLogin using the Power Platform Admin user account\\n```powershell\\n#Get Object ID of new owner\\nConnect-AzureAd\\n$adUser = Get-AzureAdUser -ObjectID $upn | Select-Object ObjectId\\n```\\n\\n#### Get All FLOWS\\n```powershell\\n#Get ALL flows accessible to Power Platform Admin\\n$flows = Get-AdminFlow\\nWrite-Host -f Magenta \\"$($flows.Count) flows accessible to current user\\"\\n```\\n\\n#### Traverse each flow\\n:::tip\\n\\nEach time we run a **\\"Request sign off\\"** in a SharePoint Library, a new flow is created in the environment (shown [above](./index.md#manual-through-ui)). We don\'t need to change ownership of that flow hence we check the display name when we traverse.\\n\\n:::\\n\\n```powershell\\n#Traverse each flow and add new user as Owner for each\\nforeach ($flow in $flows) {\\n    // highlight-next-line\\n    if ($flow.DisplayName -ne \\"Request sign-off\\") {\\n        Write-Host -f Yellow \\"Adding user $upn to $($flow.DisplayName)\\"\\n        Set-AdminFlowOwnerRole `\\n            -EnvironmentName $flow.EnvironmentName `\\n            -FlowName $flow.FlowName `\\n            -RoleName CanEdit `\\n            -PrincipalType User `\\n            -PrincipalObjectId $adUser.ObjectId\\n        Write-Host -f Green \\"Successfully added $upn to $($flow.DisplayName)\\"\\n    }\\n}\\n```\\n### Combining everything\\n\\nLet\'s combine everything we have\\n:::tip\\n    If you are using solutions in your environment, you need to make the new owner a **System Administrator for each environment**. If not, the script will get an **Error 403: Forbidden**.\\n:::\\n\\n\\n```powershell\\n#Define User Principal Name of the new owner\\n$upn = username@tenant.com\\n\\n#Get Object ID of new owner\\nConnect-AzureAd\\n$adUser = Get-AzureAdUser -ObjectID $upn | Select-Object ObjectId\\n\\n#Get ALL flows accessible to Power Platform Admin\\n$flows = Get-AdminFlow\\nWrite-Host -f Magenta \\"$($flows.Count) flows accessible to current user\\"\\n\\n#Traverse each flow and add new user as Owner for each\\nforeach ($flow in $flows) {\\n    if ($flow.DisplayName -ne \\"Request sign-off\\") {\\n        Write-Host -f Yellow \\"Adding user $upn to $($flow.DisplayName)\\"\\n        Set-AdminFlowOwnerRole `\\n            -EnvironmentName $flow.EnvironmentName `\\n            -FlowName $flow.FlowName `\\n            -RoleName CanEdit `\\n            -PrincipalType User `\\n            -PrincipalObjectId $adUser.ObjectId\\n        Write-Host -f Green \\"Successfully added $upn to $($flow.DisplayName)\\"\\n    }\\n}\\n```"}]}}')}}]);